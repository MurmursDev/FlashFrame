openapi: 3.0.0
info:
  title: FlashFrame
  description: FlashFrame service api
  version: 0.0.1
servers:
  - url: https://api.flashflame.murmurs.dev
    description: prod
paths:
  /users/{username}:
    options:
      x-skip-generation: true
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - CORS
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: { }
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
    get:
      x-amazon-apigateway-integration:
        type: 'aws_proxy'
        uri:
          Fn::Join:
            - ''
            - - 'arn:aws:apigateway:'
              - Fn::Sub: ${AWS::Region}
              - ':lambda:path/2015-03-31/functions/'
              - Fn::ImportValue: FlashFrameRestApiLambdaArn
              - '/invocations'
        passthroughBehavior: when_no_match
        httpMethod: POST
      x-handler-args:
        - arg: ', principal: java.security.Principal'
      security:
        - MyUserPool: [ ]
      description: getUserProfile
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfoView'
components:
  schemas:
    UserInfoView:
      type: object
      required:
        - name
      properties:
        name:
          type: string


  securitySchemes:
    MyUserPool:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: cognito_user_pools
      x-amazon-apigateway-authorizer:
        type: cognito_user_pools
        providerARNs:
          - Fn::ImportValue: FlashFrameUserPoolArn
